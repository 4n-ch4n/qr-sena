// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  last_name String @db.VarChar(100)
  phone String @db.VarChar(20)
  email String @unique @db.VarChar(256)
  password String @db.VarChar(256)
  is_active Boolean @default(true)
  roles String[] @default(["user"])
  created_at DateTime @default(now())
  pets Pet[]
  purchases Purchase[]
}

model PetCode {
  id String @id @default(uuid())
  code String @unique @db.VarChar(100)
  claimed Boolean @default(false)
  claimed_at DateTime?
  pet Pet?
}

model Pet {
  id String @id @default(uuid()) 
  name String @db.VarChar(100)
  age Int
  species String @db.VarChar(100)
  breed String @db.VarChar(100)
  gender String @db.VarChar(10)
  size String @db.VarChar(10)
  image String? @db.Text
  created_at DateTime @default(now())
  petCode PetCode @relation(fields: [petCode_id], references: [id])
  petCode_id String @unique
  owner User @relation(fields: [owner_id], references: [id])
  owner_id String
  lost_reports LostPetReport[]
}

model LostPetReport {
  id String @id @default(uuid())
  pet Pet @relation(fields: [pet_id], references: [id])
  pet_id String
  message String?
  location String?
  is_active Boolean @default(true)
  created_at DateTime @default(now())
}

model Purchase {
  id String @id @default(uuid())
  user_id String
  total_price Decimal @db.Decimal(10, 2)
  status OrderStatus @default(PENDING)
  payment_id BigInt?
  created_at DateTime @default(now())
  user User @relation(fields: [user_id], references: [id])
  items PurchaseItem[]
  shippingInfo ShippingInfo?
}

model PurchaseItem {
  id String @id @default(uuid())
  purchase_id String
  purchase Purchase @relation(fields: [purchase_id], references: [id])
  type PlateType
  unit_price Decimal @db.Decimal(10, 2)
  name_to_engrave String? @db.VarChar(100)
}

model ShippingInfo {
  id String @id @default(uuid())
  full_name String @db.VarChar(100)
  phone String @db.VarChar(10)
  address String @db.VarChar(256)
  city String @db.VarChar(100)
  state String @db.VarChar(100)
  postal_code String @db.VarChar(20)
  carrier String? @db.VarChar(100)
  tracking_code String?
  status ShippingStatus @default(PENDING)
  purchase_id String @unique
  purchase Purchase @relation(fields: [purchase_id], references: [id])
}

enum PlateType {
  SMALL
  MEDIUM
  LARGE
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED
  FAILED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
}
